{"version":3,"sources":["components/create-photo.component.js","components/navegation.component.js","components/photo-list.component.js","components/slider.js","components/error/404.js","App.js","serviceWorker.js","index.js"],"names":["CreatePhoto","useState","url","setUrl","description","setDescription","onSubmit","e","preventDefault","console","log","axios","post","then","response","class","htmlFor","className","id","aria-describedby","placeholder","type","name","value","onChange","target","for","rows","Navegation","to","PhotoList","photos","data","setData","useEffect","a","result","fetchData","scope","map","photo","key","_id","Slider","Fragment","infiniteLoop","src","alt","PageNotFound","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a51a6303.chunk.js","sourcesContent":["import React , { useState }  from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst CreatePhoto = () => {\n\n    const [url, setUrl] = useState('')\n    const [description, setDescription] = useState('')\n    \n    const handleSubmit = e => {\n      e.preventDefault()\n      console.log({url, description})\n      axios.post('http://localhost:5001/add', { url:url, description: description })\n      .then(function(response){\n          console.log('salvo com sucesso')\n      });  \n    \n    }  \n  \n  return (\n    <form     onSubmit={handleSubmit}>\n    <div class=\"form-group\">\n    <label htmlFor=\"url\">Insert image URL</label> <br />\n    <input\n      className=\"form-control\"\n      id=\"url\" aria-describedby=\"urlHelp\" placeholder=\"Insert image url\"\n      type=\"text\"\n      name=\"url\"\n      value={url}\n      onChange={e => setUrl(e.target.value)}\n     />\n  \n        \n    </div>\n\n    <div class=\"form-group\">\n    <label for=\"description\">Image description</label>\n   \n    <textarea\n    name=\"description\"\n    rows=\"3\"\n    id=\"description\"\n    className=\"form-control\"\n    value={description}\n    onChange={e => setDescription(e.target.value)}\n    />\n \n  </div>\n \n    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n  </form>\n\n  );\n}\n\nexport default CreatePhoto;","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nconst Navegation = () =>{\n\n    return (\n        <nav>\n            <ul>\n               <li> <NavLink to='/create'>New Photo</NavLink></li>\n               <li><NavLink to='/list'>Photo List</NavLink></li>\n               <li><NavLink to='/'>Photo Slide</NavLink></li>\n            </ul>\n        </nav>\n\n    \n    );\n  }\nexport default Navegation;\n\n\n\n","\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Navegation from './navegation.component';\n\n\nconst PhotoList = () => {\n    const [data, setData] = useState({photos: [] });\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        const result = await axios(\n          'http://localhost:5001',\n        );\n        setData(result.data);\n      };\n      fetchData();\n    }, []);\n    return (\n         \n       <div className=\"container-fluid\">\n       <div className=\"row\">\n       <div className=\"col-md-2\">\n            <Navegation />\n       </div>\n       <div className=\"col-md-10\">\n       <table class=\"table table-striped\">\n       <thead>\n         <tr>\n           <th scope=\"col\">#</th>\n           <th scope=\"col\">url</th>\n           <th scope=\"col\">description</th>\n         </tr>\n       </thead>\n       <tbody>\n       {data.photos.map(photo => (\n         <tr key={photo._id}>\n         <th scope=\"row\">{photo._id}</th>\n         <td>{photo.url}</td> \n         <td>{photo.description}</td>\n     \n         </tr>\n     \n     ))}\n     \n     \n       </tbody>\n     </table>\n       \n     </div>\n       </div> \n\n        \n\n    \n        \n        </div>\n    \n    );\n  }\nexport default PhotoList;","\n\nimport React, { useState, useEffect } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from 'react-responsive-carousel';\n\nimport axios from 'axios';\nconst Slider = () => {\n    const [data, setData] = useState({photos: [] });\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        const result = await axios(\n          'http://localhost:5001',\n        );\n        setData(result.data);\n      };\n      fetchData();\n    }, []);\n    return (\n         <React.Fragment>        \n        <Carousel infiniteLoop={true}>\n        \n\n         {data.photos.map(photo => (\n                  <div key={photo.id}>\n            <img src={photo.url} alt={photo.description} />\n            <p className=\"legend\">{photo.description}</p>\n          </div>\n        ))}\n        </Carousel>\n        <NavLink to='/create'>Add New Photo</NavLink>\n        </React.Fragment>\n        \n\n    \n    );\n  }\nexport default Slider;","import React   from 'react';\n\n\nconst PageNotFound = () => {\n\n \n  \n  return (\n\n    <h1>Page not Found</h1>\n\n\n  );\n}\n\nexport default PageNotFound;","import React   from 'react';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n \n} from \"react-router-dom\";\nimport CreatePhoto from './components/create-photo.component';\nimport PhotoList from './components/photo-list.component';\nimport Slider from './components/slider';\nimport PageNotFound from './components/error/404';\n\n\n\n\nconst App = () => {\n\n \n  \n  return (\n  <Router>\n\n  <Switch>\n    <Route path=\"/\" component={ Slider } exact />\n    <Route path='/create' component={CreatePhoto}   />\n    <Route path='/list' component=  { PhotoList }  />\n    <Route component=  { PageNotFound }  />\n    </Switch>\n    \n  </Router>\n\n \n\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}